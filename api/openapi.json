{
  "openapi": "3.0.0",
  "info": {
    "description": "This is yet another Homematic API addon, which tries to provide as much as Web-UI functionalities.",
    "version": "0.1.0",
    "title": "Homematic OpenAPI",
    "termsOfService": "https://apps.denis-loh.com",
    "contact": {
      "email": "support@denis-loh.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "channels",
      "description": "Everything about the channels"
    },
    {
      "name": "datapoints",
      "description": "View or change data point values"
    },
    {
      "name": "devices",
      "description": "Everything about your Homematic Devices"
    },
    {
      "name": "favorites",
      "description": "Manage your favorite channels"
    },
    {
      "name": "functions",
      "description": "Manage your device functions"
    },
    {
      "name": "general",
      "description": "General operations"
    },
    {
      "name": "notifications",
      "description": "System notifications"
    },
    {
      "name": "programs",
      "description": "Programs and Scripts on the CCU"
    },
    {
      "name": "rooms",
      "description": "Manage your room devices"
    },
    {
      "name": "session",
      "description": "Session management"
    },
    {
      "name": "sysvars",
      "description": "System variables and alarms"
    }
  ],
  "servers": [
    {
      "url": "http://{myHomematic}/addons/homer-api",
      "description": "Homematic CCU Host",
      "variables": {
        "myHomematic": {
          "default": "homematic",
          "description": "Hostname or IP of your CCU"
        }
      }
    }
  ],
  "security": [
    {
      "cookieAuth": []
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "summary": "Login to the homematic CCU",
        "description": "Login to the homematic CCU and return a session token",
        "operationId": "",
        "security": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/login"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/login"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          }
        },
        "tags": [
          "session",
          "general"
        ]
      }
    },
    "/logout": {
      "post": {
        "summary": "Logout from the homematic CCU",
        "description": "Logout from the homematic CCU and remove the session token",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          }
        },
        "tags": [
          "session",
          "general"
        ]
      }
    },
    "/devices": {
      "get": {
        "summary": "Lists all devices",
        "description": "Lists all registered devices of your CCU.",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devices"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{deviceId}": {
      "parameters": [
        {
          "in": "path",
          "name": "deviceId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get specific device",
        "description": "Gets all information about a specific device",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "devices"
        ]
      }
    },
    "/datapoint/{dpId}": {
      "parameters": [
        {
          "in": "path",
          "name": "dpId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Sets the state for the specific datapoint",
        "description": "Sets the state for the specific datapoint of the corresponding device",
        "operationId": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/setDatapoint"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/datapoint"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "datapoints"
        ]
      }
    },
    "/channels": {
      "get": {
        "summary": "Lists all channels",
        "description": "Lists all channels regardless of the device they belong to",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "channels": {
                      "$ref": "#/components/schemas/channels"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          }
        },
        "tags": [
          "channels"
        ]
      }
    },
    "/channels/{channelId}": {
      "parameters": [
        {
          "in": "path",
          "name": "channelId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "All information about a specific channel",
        "description": "Returns all information about a specific channel",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/channel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "channels"
        ]
      }
    },
    "/rooms": {
      "get": {
        "summary": "Lists all rooms",
        "description": "Lists all rooms and its channels",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rooms"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "rooms"
        ]
      },
      "post": {
        "summary": "Create a new room",
        "description": "Creates a new room",
        "operationId": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/createElement"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201created"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "rooms"
        ]
      }
    },
    "/rooms/{roomId}": {
      "parameters": [
        {
          "in": "path",
          "name": "roomId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get a specific room",
        "description": "Returns the specified room",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/room"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "rooms"
        ]
      },
      "delete": {
        "summary": "Deletes the room",
        "description": "Deletes the specified room",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "rooms"
        ]
      },
      "patch": {
        "summary": "Edit the room",
        "description": "allows to change the name and description of a specified room",
        "operationId": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/editNameOrDescription"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "rooms"
        ]
      }
    },
    "/functions": {
      "get": {
        "summary": "Lists all functions",
        "description": "Lists all functions and its channels",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/functions"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "functions"
        ]
      },
      "post": {
        "summary": "Create a new function",
        "description": "Creates a new function",
        "operationId": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/createElement"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201created"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "functions"
        ]
      }
    },
    "/functions/{functionId}": {
      "parameters": [
        {
          "in": "path",
          "name": "functionId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get a specific function",
        "description": "Returns the specified function",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/function"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "functions"
        ]
      },
      "delete": {
        "summary": "Deletes the function",
        "description": "Deletes the specified function",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "functions"
        ]
      },
      "patch": {
        "summary": "Edit the function",
        "description": "allows to change the name and description of a specified function",
        "operationId": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/editNameOrDescription"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "functions"
        ]
      }
    },
    "/programs": {
      "get": {
        "summary": "Lists all programs",
        "description": "Lists all available programs",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "programs": {
                      "$ref": "#/components/schemas/programs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          }
        },
        "tags": [
          "programs"
        ]
      }
    },
    "/programs/{programId}": {
      "parameters": [
        {
          "in": "path",
          "name": "programId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get a specific program",
        "description": "Returns the information about a specific program",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/program"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "programs"
        ]
      },
      "post": {
        "summary": "Runs the program",
        "description": "Executes the program. It does not return any output from the program.",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "programs"
        ]
      },
      "delete": {
        "summary": "Deletes the program",
        "description": "Deletes the specified program. This cannot be undone.",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "programs"
        ]
      }
    },
    "/favorites": {
      "get": {
        "summary": "Lists all favorites",
        "description": "Lists all favorites and its channels",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favorites"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "500": {
            "$ref": "#/components/responses/500internal"
          }
        },
        "tags": [
          "favorites"
        ]
      }
    },
    "/version": {
      "get": {
        "summary": "Gets the version of the API",
        "description": "Gets the current version of this addon and its corresponding API",
        "operationId": "",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/version"
                }
              }
            }
          }
        },
        "tags": [
          "general"
        ]
      }
    },
    "/env": {
      "get": {
        "summary": "Gets environment variables for a GET request",
        "description": "Gets the current environment variables for the request. This operation is primarily for debugging purposes. It returns also the CGI variables which contain the values for cookies or query parameters.",
        "operationId": "",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "general"
        ]
      },
      "post": {
        "summary": "Gets environment variables for a POST request",
        "description": "Gets the current environment variables for the request. This operation is primarily for debugging purposes. It returns also the CGI variables which contain the values for cookies or POST parameters.",
        "operationId": "",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "general"
        ]
      }
    },
    "/notifications": {
      "get": {
        "summary": "Get all system notifications",
        "description": "Returns all current system notifications if any",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "delete": {
        "summary": "Delete / confirm all non-sticky notifications",
        "description": "Deletes / confirms all non-sticky system notifications",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/{notificationId}": {
      "parameters": [
        {
          "in": "path",
          "name": "notificationId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "summary": "Delete / confirm a non-sticky notification",
        "description": "Deletes / confirms a non-sticky system notification",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/sysvars": {
      "get": {
        "summary": "Get all system variables",
        "description": "Returns all system variables",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          }
        },
        "tags": [
          "sysvars"
        ]
      },
      "post": {
        "summary": "Creates a new system variable",
        "description": "Creates a new system variable",
        "operationId": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/createSysvar"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201created"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          }
        },
        "tags": [
          "sysvars"
        ]
      }
    },
    "/sysvars/{sysvarId}": {
      "parameters": [
        {
          "in": "path",
          "name": "sysvarId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get a specific system variable",
        "description": "Returns the specific system variable",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "sysvars"
        ]
      },
      "post": {
        "summary": "Sets the value of the system variavble",
        "description": "Sets the value of the system variable",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "sysvars"
        ]
      },
      "patch": {
        "summary": "Changes the properties of a system variable",
        "description": "Changes the properties of a system variable. This allows to modify the type and valid values of a variable\n",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "400": {
            "$ref": "#/components/responses/400badRequest"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "sysvars"
        ]
      },
      "delete": {
        "summary": "Deletes a system variable",
        "description": "Deletes a system variable from the homematic CCU",
        "operationId": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204noContent"
          },
          "401": {
            "$ref": "#/components/responses/401unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404notFound"
          }
        },
        "tags": [
          "sysvars"
        ]
      }
    }
  },
  "components": {
    "responses": {
      "201created": {
        "description": "Created<br><br> The resource has been created. Use the location header to request the newly created resource.\n"
      },
      "204noContent": {
        "description": "No Content<br><br> The response does not contain any data.\n"
      },
      "400badRequest": {
        "description": "Bad Request<br><br> The request was misconfigured or contains wrong or invalid parameters. Please check the specification and try again.\n"
      },
      "401unauthorized": {
        "description": "Unauthorized<br><br> You're not authorized. Please login or check your credentials.\n"
      },
      "403forbidden": {
        "description": "Forbidden<br><br> You don't have the permission to perform the request.\n"
      },
      "404notFound": {
        "description": "Not Found<br><br> The requested resource or resource ID can't be found. \n"
      },
      "500internal": {
        "description": "Internal Server Error<br><br> The request stopped unexpectedly for instance when the server ran into an exception. This usually should not happen, so please report any occurences of these errors to the maintainer.\n"
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "SID"
      }
    },
    "requestBodies": {
      "login": {
        "description": "Your login credentials",
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "editNameOrDescription": {
        "description": "Parameters to change for the element",
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "setDatapoint": {
        "description": "Sets the value of a data point",
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "createElement": {
        "description": "Creates a new element",
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "createSysvar": {
        "description": "Creates a new system variable or alarm",
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "unit": {
                  "type": "string"
                },
                "channelId": {
                  "type": "string"
                },
                "minValue": {
                  "type": "integer"
                },
                "maxValue": {
                  "type": "integer"
                },
                "trueString": {
                  "type": "string"
                },
                "falseString": {
                  "type": "string"
                },
                "valueList": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "login": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          }
        }
      },
      "version": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          }
        }
      },
      "devices": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/device"
            }
          }
        }
      },
      "device": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "interface": {
            "type": "string"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/channel"
            }
          }
        }
      },
      "favorites": {
        "type": "object",
        "properties": {
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/favorite"
            }
          }
        }
      },
      "favorite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/favChannel"
            }
          }
        }
      },
      "favChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "usable": {
            "type": "boolean"
          }
        }
      },
      "rooms": {
        "type": "object",
        "properties": {
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/room"
            }
          }
        }
      },
      "room": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "channels": {
            "$ref": "#/components/schemas/channels"
          }
        }
      },
      "functions": {
        "type": "object",
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/function"
            }
          }
        }
      },
      "function": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "channels": {
            "$ref": "#/components/schemas/channels"
          }
        }
      },
      "channels": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/channel"
        }
      },
      "channel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "interface": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          },
          "partner": {
            "type": "string"
          },
          "AESavailable": {
            "type": "boolean"
          },
          "transmissionMode": {
            "type": "string"
          },
          "canOperate": {
            "type": "boolean"
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/datapoint"
            }
          }
        }
      },
      "datapoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "valueType": {
            "type": "string"
          },
          "valueUnit": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "operations": {
            "type": "string"
          }
        }
      },
      "programs": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/program"
        }
      },
      "program": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "timestampLastExecuted": {
            "type": "integer"
          },
          "isActive": {
            "type": "boolean"
          },
          "isVisible": {
            "type": "boolean"
          },
          "canOperate": {
            "type": "boolean"
          }
        }
      },
      "notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "notifications": {
        "type": "object",
        "properties": {
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notification"
            }
          }
        }
      }
    }
  }
}